// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZM.Infrastructure.Persistence.App;

#nullable disable

namespace ZM.Infrastructure.Persistence.App.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240309133107_RenameChatUsersToMembers")]
    partial class RenameChatUsersToMembers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatGroupUser", b =>
                {
                    b.Property<Guid>("ChatGroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatGroupsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("ChatGroupUser");
                });

            modelBuilder.Entity("P2PChatUser", b =>
                {
                    b.Property<Guid>("MembersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("P2PChatsId")
                        .HasColumnType("uuid");

                    b.HasKey("MembersId", "P2PChatsId");

                    b.HasIndex("P2PChatsId");

                    b.ToTable("P2PChatUser");
                });

            modelBuilder.Entity("ZM.Domain.ChatGroups.ChatGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ChatGroups");
                });

            modelBuilder.Entity("ZM.Domain.ChatGroups.ChatGroupMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasBeenRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatGroupId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatGroupMessages");
                });

            modelBuilder.Entity("ZM.Domain.Chats.P2PChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("P2PChats");
                });

            modelBuilder.Entity("ZM.Domain.Chats.P2PChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasBeenRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("P2PChatMessages");
                });

            modelBuilder.Entity("ZM.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatGroupUser", b =>
                {
                    b.HasOne("ZM.Domain.ChatGroups.ChatGroup", null)
                        .WithMany()
                        .HasForeignKey("ChatGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZM.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("P2PChatUser", b =>
                {
                    b.HasOne("ZM.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZM.Domain.Chats.P2PChat", null)
                        .WithMany()
                        .HasForeignKey("P2PChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZM.Domain.ChatGroups.ChatGroup", b =>
                {
                    b.HasOne("ZM.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ZM.Domain.ChatGroups.ChatGroupMessage", b =>
                {
                    b.HasOne("ZM.Domain.ChatGroups.ChatGroup", "ChatGroup")
                        .WithMany("Messages")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZM.Domain.Users.User", "Sender")
                        .WithMany("ChatGroupMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatGroup");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ZM.Domain.Chats.P2PChatMessage", b =>
                {
                    b.HasOne("ZM.Domain.Chats.P2PChat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZM.Domain.Users.User", "Sender")
                        .WithMany("P2PChatMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ZM.Domain.ChatGroups.ChatGroup", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ZM.Domain.Chats.P2PChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ZM.Domain.Users.User", b =>
                {
                    b.Navigation("ChatGroupMessages");

                    b.Navigation("P2PChatMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
